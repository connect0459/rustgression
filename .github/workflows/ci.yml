name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: # 手動実行も可能にする

run-name: CI on ${{ github.head_ref || github.ref_name }}

jobs:
  run:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # 一つの環境のビルド失敗で全体が止まらないようにする
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6.7.0

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@02be93da58aa71fb456aa9c43b301149248829d8 # v1.15.1
        # rust-toolchain.tomlを自動的に読み込んでツールチェーンをセットアップ

      # Linux環境のセットアップ（Ubuntu）
      - name: Setup Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          if command -v cmake &> /dev/null; then
            echo "cmake is already installed"
            cmake --version
          else
            sudo apt-get update
            sudo apt-get install -y cmake
          fi

      # macOS環境のセットアップ
      - name: Setup macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          if command -v cmake &> /dev/null; then
            echo "cmake is already installed"
            cmake --version
          else
            brew install cmake
          fi

      # Windows環境のセットアップ
      - name: Setup Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          if (Get-Command cmake -ErrorAction SilentlyContinue) {
            Write-Output "cmake is already installed"
            cmake --version
          } else {
            choco install cmake -y
          }

      # ビルドとインストール
      - name: Build wheels and install
        shell: bash
        run: |
          # 環境情報を表示
          echo "Building environment info:"
          uv run python --version
          rustc --version

          # pyproject.tomlから依存関係を同期（本体依存関係と開発依存関係を含む）
          uv sync

          # 前回のビルドで生成されたwheelsをクリーンアッ
          rm -rf target/wheels/ || echo "No wheels directory to clean"

          # ホイールをビルド（PyPI互換性を確保）
          uv run maturin build --release --compatibility pypi

          # ビルドされたホイールを確認
          echo "Built wheels:"
          ls -la target/wheels/ || echo "No wheels directory found"

          # インストールされたモジュールを確認
          echo "インストールされたパッケージ:"
          uv pip list

          # Pythonモジュールパスとモジュール構造を確認
          uv run python -c "import sys; print('Python module paths:'); [print(p) for p in sys.path]"
          uv run python -c "import rustgression; print('Rustgression module location:', rustgression.__file__)"

      # パッケージのインポートテスト
      - name: Test import
        shell: bash
        run: |
          uv run python scripts/test-import-operation.py

      # テストの実行
      - name: Run tests
        shell: bash
        run: |
          # インポートテスト（失敗時はワークフローを失敗させる）
          if ! uv run python -c "import rustgression"; then
            echo "Import failed: rustgression module not found."
            exit 1
          fi

          # テスト実行
          uv run pytest
