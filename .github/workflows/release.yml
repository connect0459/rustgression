name: Release to PyPI

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ${{ matrix.os }}
    if: github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11"]
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # バージョン確認ステップ
      - name: Check versions
        shell: bash
        run: |
          # Gitタグからバージョンを取得（v0.0.1 -> 0.0.1）
          GIT_VERSION=${GITHUB_REF#refs/tags/v}

          # Cargo.tomlのバージョンを取得
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f2)

          # pyproject.tomlのバージョンを取得
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | cut -d '"' -f2)

          # バージョンの一致を確認
          if [ "$GIT_VERSION" != "$CARGO_VERSION" ] || [ "$GIT_VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "Version mismatch!"
            echo "Git tag: $GIT_VERSION"
            echo "Cargo.toml: $CARGO_VERSION"
            echo "pyproject.toml: $PYPROJECT_VERSION"
            exit 1
          fi
          echo "Versions match: $GIT_VERSION"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      # Linux環境のセットアップ（Ubuntu）
      - name: Setup Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake

      # Windows環境のセットアップ
      - name: Setup Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake -y

      # PyPIへの公開
      - name: Publish to PyPI
        shell: bash
        run: |
          echo "Building wheels for release..."
          pip install maturin
          pip install twine

          # ホイールを明示的にビルド
          maturin build --release

          # ビルドされたホイールの場所を確認
          echo "Checking for wheel files:"
          find target -name "*.whl" || echo "No wheels found with find"
          ls -la target/wheels/ || echo "No wheels directory"

          # ホイールが見つかったらアップロード
          wheel_files=$(find target -name "*.whl")
          if [ -n "$wheel_files" ]; then
            echo "Uploading wheel files to PyPI:"
            echo "$wheel_files"

            # 環境変数を設定
            export TWINE_USERNAME=__token__
            export TWINE_PASSWORD=${{ secrets.PYPI_API_TOKEN }}

            # twineでアップロード
            twine upload $wheel_files
          else
            echo "No wheel files found. Building with PEP517 as fallback..."
            pip install build
            python -m build

            # distディレクトリを確認
            ls -la dist/ || echo "No dist directory"

            # distにファイルがあればアップロード
            if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
              echo "Uploading dist files to PyPI:"
              ls -la dist/

              export TWINE_USERNAME=__token__
              export TWINE_PASSWORD=${{ secrets.PYPI_API_TOKEN }}

              twine upload dist/*
            else
              echo "No distribution files found"
              exit 1
            fi
          fi
