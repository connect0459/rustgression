name: Release to PyPI

on:
  release:
    types: [published]

jobs:
  # Step 1: 全プラットフォームでビルド
  build:
    runs-on: ${{ matrix.os }}
    if: github.event.release.target_commitish == 'main'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0

      # バージョン確認ステップ
      - name: Check version consistency
        shell: bash
        run: |
          ./scripts/version-check.sh

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # stable
        with:
          toolchain: stable

      # Linux環境のセットアップ（Ubuntu）
      - name: Setup Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          if command -v cmake &> /dev/null; then
            echo "cmake is already installed"
            cmake --version
          else
            sudo apt-get update
            sudo apt-get install -y cmake
          fi

      # macOS環境のセットアップ
      - name: Setup macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          if command -v cmake &> /dev/null; then
            echo "cmake is already installed"
            cmake --version
          else
            brew install cmake
          fi

      # Windows環境のセットアップ
      - name: Setup Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          if (Get-Command cmake -ErrorAction SilentlyContinue) {
            Write-Output "cmake is already installed"
            cmake --version
          } else {
            choco install cmake -y
          }

      # ホイールをビルド
      - name: Build wheels
        shell: bash
        run: |
          echo "Building wheels for ${{ matrix.os }}..."
          pip install maturin

          # ホイールを明示的にビルド
          maturin build --release

          # ビルドされたホイールの場所を確認
          echo "Built wheels:"
          ls -la target/wheels/ || echo "No wheels directory found"

      # ビルドしたホイールをアーティファクトとしてアップロード
      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: wheels-${{ matrix.os }}
          path: target/wheels/*.whl
          retention-days: 1

  # Step 2: 全てのビルドが成功した後に一括パブリッシュ
  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          pattern: wheels-*
          path: dist/
          merge-multiple: true

      - name: Verify downloaded wheels
        run: |
          echo "Downloaded wheels:"
          ls -la dist/
          echo "Wheel count: $(ls -1 dist/*.whl | wc -l)"

      - name: Publish to PyPI
        run: |
          pip install twine

          # 環境変数を設定
          export TWINE_USERNAME=__token__
          export TWINE_PASSWORD=${{ secrets.PYPI_API_TOKEN }}

          # 全てのホイールを一括アップロード
          echo "Uploading all wheels to PyPI:"
          twine upload dist/*.whl
