name: Build and Deploy

on:
  release:
    types: [published]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: # 手動実行も可能にする

jobs:
  build-and-deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # 一つの環境のビルド失敗で全体が止まらないようにする
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11"]
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # バージョン確認ステップ（リリース時のみ実行）
      - name: Check versions
        if: github.event_name == 'release'
        shell: bash
        run: |
          # Gitタグからバージョンを取得（v0.0.1 -> 0.0.1）
          GIT_VERSION=${GITHUB_REF#refs/tags/v}

          # Cargo.tomlのバージョンを取得
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f2)

          # pyproject.tomlのバージョンを取得
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | cut -d '"' -f2)

          # バージョンの一致を確認
          if [ "$GIT_VERSION" != "$CARGO_VERSION" ] || [ "$GIT_VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "Version mismatch!"
            echo "Git tag: $GIT_VERSION"
            echo "Cargo.toml: $CARGO_VERSION"
            echo "pyproject.toml: $PYPROJECT_VERSION"
            exit 1
          fi
          echo "Versions match: $GIT_VERSION"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      # Linux環境のセットアップ（Ubuntu）
      - name: Setup Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake

      # Windows環境のセットアップ
      - name: Setup Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # 必要に応じてWindows固有の依存関係をインストール
          choco install cmake -y

      # maturinを使用してホイールをビルド
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.os == 'windows-latest' && 'x86_64-pc-windows-msvc' || 'x86_64' }}
          args: --release --strip
          manylinux: auto
          container: off
        env:
          # デバッグ情報を表示
          RUST_BACKTRACE: 1

      # ビルドされたホイールをインストールしてテスト
      - name: Install built wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          find target/wheels -name "*.whl"
          wheel_path=$(find target/wheels -name "*.whl" | head -n 1)
          python -m pip install $wheel_path

      # パッケージのインポートテスト
      - name: Test import
        run: |
          python -c "import rustgression; print(f'Successfully imported rustgression {rustgression.__version__}')"

      # テストの実行
      - name: Run tests
        run: |
          # インポートできる場合だけテストを実行
          python -c "import rustgression" && python -m pytest || echo "Skipping tests due to import failure"

      # ビルド成果物をアップロード（PRとワークフロー手動実行時のみ）
      - name: Upload wheels as artifacts
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: target/wheels/*.whl
          retention-days: 7

      # PyPIへの公開（リリース時のみ）
      - name: Publish to PyPI
        if: github.event_name == 'release'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload target/wheels/*
