name: Deploy to PyPI

on:
  release:
    types: [published]

jobs:
  deploy-to-pypi:
    if: github.event_name == 'release'
    # マトリックスビルドを使用して複数のプラットフォームでビルド
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check versions
        shell: bash
        run: |
          # Gitタグからバージョンを取得（v0.0.1 -> 0.0.1）
          GIT_VERSION=${GITHUB_REF#refs/tags/v}

          # Cargo.tomlのバージョンを取得
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f2)

          # pyproject.tomlのバージョンを取得
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | cut -d '"' -f2)

          # バージョンの一致を確認
          if [ "$GIT_VERSION" != "$CARGO_VERSION" ] || [ "$GIT_VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "Version mismatch!"
            echo "Git tag: $GIT_VERSION"
            echo "Cargo.toml: $CARGO_VERSION"
            echo "pyproject.toml: $PYPROJECT_VERSION"
            exit 1
          fi
          echo "Versions match: $GIT_VERSION"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # OSに応じてビルド設定を変更
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.os == 'windows-latest' && 'x64' || 'x86_64' }}
          args: --release --strip
          manylinux: ${{ matrix.os == 'ubuntu-latest' && 'auto' || 'off' }}
          container: off

      - name: Install twine
        run: pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload target/wheels/*
        